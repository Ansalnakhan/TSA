{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled41.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyPR9srPzgYSpd685yecde6f",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Ansalnakhan/TSA/blob/main/project%207%20B0007%20bipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 302,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "McbdgQooJD-C",
        "outputId": "7f4a40e1-f1a5-4e88-a659-0eb44422237d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:1: UserWarning: Config option `use_jedi` not recognized by `IPCompleter`.\n",
            "  \"\"\"Entry point for launching an IPython kernel.\n"
          ]
        }
      ],
      "source": [
        "%config Completer.use_jedi = False"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%matplotlib inline\n",
        "!pip show tensorflow\n",
        "!wget -cq https://ti.arc.nasa.gov/c/5 -O naza.zip\n",
        "!unzip -qqo naza.zip -d battery_data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "04G9Li1GJguR",
        "outputId": "acfd5e7b-0b4f-42b6-c897-fb5eb1ecdaf1"
      },
      "execution_count": 303,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Name: tensorflow\n",
            "Version: 2.8.2+zzzcolab20220527125636\n",
            "Summary: TensorFlow is an open source machine learning framework for everyone.\n",
            "Home-page: https://www.tensorflow.org/\n",
            "Author: Google Inc.\n",
            "Author-email: packages@tensorflow.org\n",
            "License: Apache 2.0\n",
            "Location: /usr/local/lib/python3.7/dist-packages\n",
            "Requires: protobuf, keras, opt-einsum, setuptools, termcolor, numpy, absl-py, tensorflow-estimator, flatbuffers, astunparse, typing-extensions, tensorflow-io-gcs-filesystem, gast, six, wrapt, google-pasta, libclang, grpcio, tensorboard, h5py, keras-preprocessing\n",
            "Required-by: kapre\n",
            "[naza.zip]\n",
            "  End-of-central-directory signature not found.  Either this file is not\n",
            "  a zipfile, or it constitutes one disk of a multi-part archive.  In the\n",
            "  latter case the central directory and zipfile comment will be found on\n",
            "  the last disk(s) of this archive.\n",
            "unzip:  cannot find zipfile directory in one of naza.zip or\n",
            "        naza.zip.zip, and cannot find naza.zip.ZIP, period.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import datetime\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from scipy.io import loadmat\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "from sklearn.metrics import mean_squared_error\n",
        "from sklearn import metrics\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns"
      ],
      "metadata": {
        "id": "cwQaAW7ZJluj"
      },
      "execution_count": 304,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def load_data(battery):\n",
        "  mat = loadmat('/content/data/' + battery + '.mat')\n",
        "  print('Total data in dataset: ', len(mat[battery][0, 0]['cycle'][0]))\n",
        "  counter = 0\n",
        "  dataset = []\n",
        "  capacity_data = []\n",
        "  \n",
        "  for i in range(len(mat[battery][0, 0]['cycle'][0])):\n",
        "    row = mat[battery][0, 0]['cycle'][0, i]\n",
        "    if row['type'][0] == 'discharge':\n",
        "      ambient_temperature = row['ambient_temperature'][0][0]\n",
        "      date_time = datetime.datetime(int(row['time'][0][0]),\n",
        "                               int(row['time'][0][1]),\n",
        "                               int(row['time'][0][2]),\n",
        "                               int(row['time'][0][3]),\n",
        "                               int(row['time'][0][4])) + datetime.timedelta(seconds=int(row['time'][0][5]))\n",
        "      data = row['data']\n",
        "      capacity = data[0][0]['Capacity'][0][0]\n",
        "      for j in range(len(data[0][0]['Voltage_measured'][0])):\n",
        "        voltage_measured = data[0][0]['Voltage_measured'][0][j]\n",
        "        current_measured = data[0][0]['Current_measured'][0][j]\n",
        "        temperature_measured = data[0][0]['Temperature_measured'][0][j]\n",
        "        current_load = data[0][0]['Current_load'][0][j]\n",
        "        voltage_load = data[0][0]['Voltage_load'][0][j]\n",
        "        time = data[0][0]['Time'][0][j]\n",
        "        dataset.append([counter + 1, ambient_temperature, date_time, capacity,\n",
        "                        voltage_measured, current_measured,\n",
        "                        temperature_measured, current_load,\n",
        "                        voltage_load, time])\n",
        "      capacity_data.append([counter + 1, ambient_temperature, date_time, capacity])\n",
        "      counter = counter + 1\n",
        "  print(dataset[0])\n",
        "  return [pd.DataFrame(data=dataset,\n",
        "                       columns=['cycle', 'ambient_temperature', 'datetime',\n",
        "                                'capacity', 'voltage_measured',\n",
        "                                'current_measured', 'temperature_measured',\n",
        "                                'current_load', 'voltage_load', 'time']),\n",
        "          pd.DataFrame(data=capacity_data,\n",
        "                       columns=['cycle', 'ambient_temperature', 'datetime',\n",
        "                                'capacity'])]\n",
        "dataset, capacity = load_data('B0007')\n",
        "pd.set_option('display.max_columns', 10)\n",
        "print(dataset.head())\n",
        "dataset.describe()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 574
        },
        "id": "tzEIqbsrJsyT",
        "outputId": "08dc2cde-aa03-4142-ea97-59ded11d633d"
      },
      "execution_count": 305,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Total data in dataset:  616\n",
            "[1, 24, datetime.datetime(2008, 4, 2, 15, 25, 41), 1.89105229539079, 4.199359521791473, -0.0018658918833680202, 23.93704394613529, -0.0004, 0.0, 0.0]\n",
            "   cycle  ambient_temperature            datetime  capacity  voltage_measured  \\\n",
            "0      1                   24 2008-04-02 15:25:41  1.891052          4.199360   \n",
            "1      1                   24 2008-04-02 15:25:41  1.891052          4.199497   \n",
            "2      1                   24 2008-04-02 15:25:41  1.891052          3.985606   \n",
            "3      1                   24 2008-04-02 15:25:41  1.891052          3.963247   \n",
            "4      1                   24 2008-04-02 15:25:41  1.891052          3.946647   \n",
            "\n",
            "   current_measured  temperature_measured  current_load  voltage_load    time  \n",
            "0         -0.001866             23.937044       -0.0004         0.000   0.000  \n",
            "1         -0.002139             23.924074       -0.0004         4.215  16.781  \n",
            "2         -1.988778             24.004257       -2.0000         3.003  35.703  \n",
            "3         -1.992558             24.162868       -2.0000         2.987  53.781  \n",
            "4         -1.988491             24.346368       -2.0000         2.972  71.922  \n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              cycle  ambient_temperature      capacity  voltage_measured  \\\n",
              "count  50285.000000              50285.0  50285.000000      50285.000000   \n",
              "mean      88.125942                 24.0      1.632911          3.516153   \n",
              "std       45.699687                  0.0      0.152751          0.268665   \n",
              "min        1.000000                 24.0      1.400455          1.737030   \n",
              "25%       50.000000                 24.0      1.497822          3.408859   \n",
              "50%       88.000000                 24.0      1.605663          3.520359   \n",
              "75%      127.000000                 24.0      1.785885          3.681617   \n",
              "max      168.000000                 24.0      1.891052          4.233325   \n",
              "\n",
              "       current_measured  temperature_measured  current_load  voltage_load  \\\n",
              "count      50285.000000          50285.000000  50285.000000  50285.000000   \n",
              "mean          -1.910982             32.374078      1.471671      2.499169   \n",
              "std            0.387120              4.004486      1.294697      0.550780   \n",
              "min           -2.006038             22.969923     -2.000000      0.000000   \n",
              "25%           -1.990432             29.683138      2.000000      2.470000   \n",
              "50%           -1.989406             32.294479      2.000000      2.582000   \n",
              "75%           -1.988328             35.230784      2.000000      2.743000   \n",
              "max            0.005072             42.332522      2.000000      4.249000   \n",
              "\n",
              "               time  \n",
              "count  50285.000000  \n",
              "mean    1546.208924  \n",
              "std      906.640295  \n",
              "min        0.000000  \n",
              "25%      768.563000  \n",
              "50%     1537.031000  \n",
              "75%     2305.984000  \n",
              "max     3690.234000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d58b9ae4-a6b1-404f-999b-458a6d640d41\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>cycle</th>\n",
              "      <th>ambient_temperature</th>\n",
              "      <th>capacity</th>\n",
              "      <th>voltage_measured</th>\n",
              "      <th>current_measured</th>\n",
              "      <th>temperature_measured</th>\n",
              "      <th>current_load</th>\n",
              "      <th>voltage_load</th>\n",
              "      <th>time</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>50285.000000</td>\n",
              "      <td>50285.0</td>\n",
              "      <td>50285.000000</td>\n",
              "      <td>50285.000000</td>\n",
              "      <td>50285.000000</td>\n",
              "      <td>50285.000000</td>\n",
              "      <td>50285.000000</td>\n",
              "      <td>50285.000000</td>\n",
              "      <td>50285.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>88.125942</td>\n",
              "      <td>24.0</td>\n",
              "      <td>1.632911</td>\n",
              "      <td>3.516153</td>\n",
              "      <td>-1.910982</td>\n",
              "      <td>32.374078</td>\n",
              "      <td>1.471671</td>\n",
              "      <td>2.499169</td>\n",
              "      <td>1546.208924</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>45.699687</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.152751</td>\n",
              "      <td>0.268665</td>\n",
              "      <td>0.387120</td>\n",
              "      <td>4.004486</td>\n",
              "      <td>1.294697</td>\n",
              "      <td>0.550780</td>\n",
              "      <td>906.640295</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>24.0</td>\n",
              "      <td>1.400455</td>\n",
              "      <td>1.737030</td>\n",
              "      <td>-2.006038</td>\n",
              "      <td>22.969923</td>\n",
              "      <td>-2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>50.000000</td>\n",
              "      <td>24.0</td>\n",
              "      <td>1.497822</td>\n",
              "      <td>3.408859</td>\n",
              "      <td>-1.990432</td>\n",
              "      <td>29.683138</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>2.470000</td>\n",
              "      <td>768.563000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>88.000000</td>\n",
              "      <td>24.0</td>\n",
              "      <td>1.605663</td>\n",
              "      <td>3.520359</td>\n",
              "      <td>-1.989406</td>\n",
              "      <td>32.294479</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>2.582000</td>\n",
              "      <td>1537.031000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>127.000000</td>\n",
              "      <td>24.0</td>\n",
              "      <td>1.785885</td>\n",
              "      <td>3.681617</td>\n",
              "      <td>-1.988328</td>\n",
              "      <td>35.230784</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>2.743000</td>\n",
              "      <td>2305.984000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>168.000000</td>\n",
              "      <td>24.0</td>\n",
              "      <td>1.891052</td>\n",
              "      <td>4.233325</td>\n",
              "      <td>0.005072</td>\n",
              "      <td>42.332522</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>4.249000</td>\n",
              "      <td>3690.234000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d58b9ae4-a6b1-404f-999b-458a6d640d41')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-d58b9ae4-a6b1-404f-999b-458a6d640d41 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-d58b9ae4-a6b1-404f-999b-458a6d640d41');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 305
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plot_df = capacity.loc[(capacity['cycle']>=1),['cycle','capacity']]\n",
        "sns.set_style(\"darkgrid\")\n",
        "plt.figure(figsize=(12, 8))\n",
        "plt.plot(plot_df['cycle'], plot_df['capacity'])\n",
        "#Draw threshold\n",
        "plt.plot([0.,len(capacity)], [1.4, 1.4])\n",
        "plt.ylabel('Capacity')\n",
        "# make x-axis ticks legible\n",
        "adf = plt.gca().get_xaxis().get_major_formatter()\n",
        "plt.xlabel('cycle')\n",
        "plt.title('Discharge B0007')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 531
        },
        "id": "ZlCpde8KKaYk",
        "outputId": "215a26a8-5e1b-443e-dda0-fa2625d600ff"
      },
      "execution_count": 306,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Discharge B0007')"
            ]
          },
          "metadata": {},
          "execution_count": 306
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 864x576 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "attrib=['cycle', 'datetime', 'capacity']\n",
        "dis_ele = capacity[attrib]\n",
        "C = dis_ele['capacity'][0]\n",
        "for i in range(len(dis_ele)):\n",
        "    dis_ele['SoH']=(dis_ele['capacity'])/C\n",
        "print(dis_ele.head(5))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lK4fjzLyKeZ_",
        "outputId": "85fa75f2-e8e9-4309-a121-481880ec656b"
      },
      "execution_count": 307,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   cycle            datetime  capacity       SoH\n",
            "0      1 2008-04-02 15:25:41  1.891052  1.000000\n",
            "1      2 2008-04-02 19:43:48  1.880637  0.994492\n",
            "2      3 2008-04-03 00:01:06  1.880663  0.994506\n",
            "3      4 2008-04-03 04:16:37  1.880771  0.994563\n",
            "4      5 2008-04-03 08:33:25  1.879451  0.993865\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plot_df = dis_ele.loc[(dis_ele['cycle']>=1),['cycle','SoH']]\n",
        "sns.set_style(\"white\")\n",
        "plt.figure(figsize=(8, 5))\n",
        "plt.plot(plot_df['cycle'], plot_df['SoH'])\n",
        "#Draw threshold\n",
        "plt.plot([0.,len(capacity)], [0.70, 0.70])\n",
        "plt.ylabel('SOH')\n",
        "# make x-axis ticks legible\n",
        "adf = plt.gca().get_xaxis().get_major_formatter()\n",
        "plt.xlabel('cycle')\n",
        "plt.title('Discharge B0007')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 368
        },
        "id": "biiKuFJFKjOE",
        "outputId": "f44745df-c349-42c0-eb98-126461b63dbb"
      },
      "execution_count": 308,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Discharge B0007')"
            ]
          },
          "metadata": {},
          "execution_count": 308
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 576x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "C = dataset['capacity'][0]\n",
        "soh = []\n",
        "for i in range(len(dataset)):\n",
        "  soh.append([dataset['capacity'][i] / C])\n",
        "soh = pd.DataFrame(data=soh, columns=['SoH'])\n",
        "\n",
        "attribs=['capacity', 'voltage_measured', 'current_measured',\n",
        "         'temperature_measured', 'current_load', 'voltage_load', 'time']\n",
        "train_dataset = dataset[attribs]\n",
        "sc = MinMaxScaler(feature_range=(0,1))\n",
        "train_dataset = sc.fit_transform(train_dataset)\n",
        "print(train_dataset.shape)\n",
        "print(soh.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gNOg-S9wKrSA",
        "outputId": "edd6081d-ec91-48f3-fa00-4414815fbe95"
      },
      "execution_count": 309,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(50285, 7)\n",
            "(50285, 1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense\n",
        "from tensorflow.keras.layers import Dropout\n",
        "from tensorflow.keras.layers import Flatten\n",
        "from tensorflow.keras.layers import LSTM\n",
        "from tensorflow.keras.optimizers import Adam"
      ],
      "metadata": {
        "id": "tE4efD6JLxkd"
      },
      "execution_count": 310,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model = Sequential()\n",
        "model.add(Dense(8, activation='relu', input_dim=train_dataset.shape[1]))\n",
        "model.add(Dense(8, activation='relu'))\n",
        "model.add(Dense(8, activation='relu'))\n",
        "model.add(Dropout(rate=0.25))\n",
        "model.add(Dense(1))\n",
        "model.summary()\n",
        "model.compile(optimizer=Adam(beta_1=0.9, beta_2=0.999, epsilon=1e-08), loss='mean_absolute_error')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pdBiGw6FL3zr",
        "outputId": "f0aba270-9d57-4069-d18a-8bfb400367bd"
      },
      "execution_count": 311,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_28\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " dense_67 (Dense)            (None, 8)                 64        \n",
            "                                                                 \n",
            " dense_68 (Dense)            (None, 8)                 72        \n",
            "                                                                 \n",
            " dense_69 (Dense)            (None, 8)                 72        \n",
            "                                                                 \n",
            " dropout_73 (Dropout)        (None, 8)                 0         \n",
            "                                                                 \n",
            " dense_70 (Dense)            (None, 1)                 9         \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 217\n",
            "Trainable params: 217\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.fit(x=train_dataset, y=soh.to_numpy(), batch_size=25, epochs=50)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bJ_aPgdeZuMo",
        "outputId": "9330615f-d869-4431-df03-c70dbd12e9c5"
      },
      "execution_count": 312,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/50\n",
            "2012/2012 [==============================] - 4s 2ms/step - loss: 0.1369\n",
            "Epoch 2/50\n",
            "2012/2012 [==============================] - 3s 2ms/step - loss: 0.0191\n",
            "Epoch 3/50\n",
            "2012/2012 [==============================] - 3s 2ms/step - loss: 0.0184\n",
            "Epoch 4/50\n",
            "2012/2012 [==============================] - 3s 2ms/step - loss: 0.0182\n",
            "Epoch 5/50\n",
            "2012/2012 [==============================] - 3s 2ms/step - loss: 0.0181\n",
            "Epoch 6/50\n",
            "2012/2012 [==============================] - 3s 2ms/step - loss: 0.0181\n",
            "Epoch 7/50\n",
            "2012/2012 [==============================] - 3s 2ms/step - loss: 0.0182\n",
            "Epoch 8/50\n",
            "2012/2012 [==============================] - 3s 2ms/step - loss: 0.0184\n",
            "Epoch 9/50\n",
            "2012/2012 [==============================] - 3s 2ms/step - loss: 0.0180\n",
            "Epoch 10/50\n",
            "2012/2012 [==============================] - 3s 2ms/step - loss: 0.0183\n",
            "Epoch 11/50\n",
            "2012/2012 [==============================] - 3s 2ms/step - loss: 0.0181\n",
            "Epoch 12/50\n",
            "2012/2012 [==============================] - 3s 2ms/step - loss: 0.0181\n",
            "Epoch 13/50\n",
            "2012/2012 [==============================] - 3s 2ms/step - loss: 0.0180\n",
            "Epoch 14/50\n",
            "2012/2012 [==============================] - 3s 2ms/step - loss: 0.0179\n",
            "Epoch 15/50\n",
            "2012/2012 [==============================] - 3s 2ms/step - loss: 0.0178\n",
            "Epoch 16/50\n",
            "2012/2012 [==============================] - 3s 2ms/step - loss: 0.0179\n",
            "Epoch 17/50\n",
            "2012/2012 [==============================] - 3s 2ms/step - loss: 0.0181\n",
            "Epoch 18/50\n",
            "2012/2012 [==============================] - 3s 2ms/step - loss: 0.0181\n",
            "Epoch 19/50\n",
            "2012/2012 [==============================] - 3s 2ms/step - loss: 0.0179\n",
            "Epoch 20/50\n",
            "2012/2012 [==============================] - 3s 2ms/step - loss: 0.0178\n",
            "Epoch 21/50\n",
            "2012/2012 [==============================] - 3s 2ms/step - loss: 0.0182\n",
            "Epoch 22/50\n",
            "2012/2012 [==============================] - 3s 2ms/step - loss: 0.0182\n",
            "Epoch 23/50\n",
            "2012/2012 [==============================] - 3s 2ms/step - loss: 0.0179\n",
            "Epoch 24/50\n",
            "2012/2012 [==============================] - 3s 2ms/step - loss: 0.0181\n",
            "Epoch 25/50\n",
            "2012/2012 [==============================] - 3s 2ms/step - loss: 0.0179\n",
            "Epoch 26/50\n",
            "2012/2012 [==============================] - 3s 2ms/step - loss: 0.0180\n",
            "Epoch 27/50\n",
            "2012/2012 [==============================] - 3s 2ms/step - loss: 0.0181\n",
            "Epoch 28/50\n",
            "2012/2012 [==============================] - 3s 2ms/step - loss: 0.0178\n",
            "Epoch 29/50\n",
            "2012/2012 [==============================] - 4s 2ms/step - loss: 0.0181\n",
            "Epoch 30/50\n",
            "2012/2012 [==============================] - 3s 2ms/step - loss: 0.0180\n",
            "Epoch 31/50\n",
            "2012/2012 [==============================] - 3s 2ms/step - loss: 0.0179\n",
            "Epoch 32/50\n",
            "2012/2012 [==============================] - 3s 2ms/step - loss: 0.0180\n",
            "Epoch 33/50\n",
            "2012/2012 [==============================] - 3s 2ms/step - loss: 0.0180\n",
            "Epoch 34/50\n",
            "2012/2012 [==============================] - 3s 2ms/step - loss: 0.0182\n",
            "Epoch 35/50\n",
            "2012/2012 [==============================] - 3s 2ms/step - loss: 0.0177\n",
            "Epoch 36/50\n",
            "2012/2012 [==============================] - 3s 2ms/step - loss: 0.0178\n",
            "Epoch 37/50\n",
            "2012/2012 [==============================] - 3s 2ms/step - loss: 0.0178\n",
            "Epoch 38/50\n",
            "2012/2012 [==============================] - 4s 2ms/step - loss: 0.0179\n",
            "Epoch 39/50\n",
            "2012/2012 [==============================] - 3s 2ms/step - loss: 0.0179\n",
            "Epoch 40/50\n",
            "2012/2012 [==============================] - 3s 2ms/step - loss: 0.0179\n",
            "Epoch 41/50\n",
            "2012/2012 [==============================] - 3s 2ms/step - loss: 0.0180\n",
            "Epoch 42/50\n",
            "2012/2012 [==============================] - 3s 2ms/step - loss: 0.0179\n",
            "Epoch 43/50\n",
            "2012/2012 [==============================] - 3s 2ms/step - loss: 0.0179\n",
            "Epoch 44/50\n",
            "2012/2012 [==============================] - 3s 2ms/step - loss: 0.0177\n",
            "Epoch 45/50\n",
            "2012/2012 [==============================] - 3s 2ms/step - loss: 0.0181\n",
            "Epoch 46/50\n",
            "2012/2012 [==============================] - 3s 2ms/step - loss: 0.0180\n",
            "Epoch 47/50\n",
            "2012/2012 [==============================] - 3s 2ms/step - loss: 0.0180\n",
            "Epoch 48/50\n",
            "2012/2012 [==============================] - 3s 2ms/step - loss: 0.0178\n",
            "Epoch 49/50\n",
            "2012/2012 [==============================] - 3s 2ms/step - loss: 0.0182\n",
            "Epoch 50/50\n",
            "2012/2012 [==============================] - 3s 2ms/step - loss: 0.0177\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7fa403810dd0>"
            ]
          },
          "metadata": {},
          "execution_count": 312
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset_val, capacity_val = load_data('B0007')\n",
        "attrib=['cycle', 'datetime', 'capacity']\n",
        "dis_ele = capacity_val[attrib]\n",
        "C = dis_ele['capacity'][0]\n",
        "for i in range(len(dis_ele)):\n",
        "    dis_ele['SoH']=(dis_ele['capacity']) / C\n",
        "print(dataset_val.head(5))\n",
        "print(dis_ele.head(5))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JLLcGcBhL-IO",
        "outputId": "7aec9ee4-4c2c-440d-ec95-1160c168d073"
      },
      "execution_count": 313,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Total data in dataset:  616\n",
            "[1, 24, datetime.datetime(2008, 4, 2, 15, 25, 41), 1.89105229539079, 4.199359521791473, -0.0018658918833680202, 23.93704394613529, -0.0004, 0.0, 0.0]\n",
            "   cycle  ambient_temperature            datetime  capacity  voltage_measured  \\\n",
            "0      1                   24 2008-04-02 15:25:41  1.891052          4.199360   \n",
            "1      1                   24 2008-04-02 15:25:41  1.891052          4.199497   \n",
            "2      1                   24 2008-04-02 15:25:41  1.891052          3.985606   \n",
            "3      1                   24 2008-04-02 15:25:41  1.891052          3.963247   \n",
            "4      1                   24 2008-04-02 15:25:41  1.891052          3.946647   \n",
            "\n",
            "   current_measured  temperature_measured  current_load  voltage_load    time  \n",
            "0         -0.001866             23.937044       -0.0004         0.000   0.000  \n",
            "1         -0.002139             23.924074       -0.0004         4.215  16.781  \n",
            "2         -1.988778             24.004257       -2.0000         3.003  35.703  \n",
            "3         -1.992558             24.162868       -2.0000         2.987  53.781  \n",
            "4         -1.988491             24.346368       -2.0000         2.972  71.922  \n",
            "   cycle            datetime  capacity       SoH\n",
            "0      1 2008-04-02 15:25:41  1.891052  1.000000\n",
            "1      2 2008-04-02 19:43:48  1.880637  0.994492\n",
            "2      3 2008-04-03 00:01:06  1.880663  0.994506\n",
            "3      4 2008-04-03 04:16:37  1.880771  0.994563\n",
            "4      5 2008-04-03 08:33:25  1.879451  0.993865\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "IXlRC4G1Zpvf"
      },
      "execution_count": 313,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "attrib=['capacity', 'voltage_measured', 'current_measured',\n",
        "        'temperature_measured', 'current_load', 'voltage_load', 'time']\n",
        "soh_pred = model.predict(sc.fit_transform(dataset_val[attrib]))\n",
        "print(soh_pred.shape)\n",
        "\n",
        "C = dataset_val['capacity'][0]\n",
        "soh = []\n",
        "for i in range(len(dataset_val)):\n",
        "  soh.append(dataset_val['capacity'][i] / C)\n",
        "new_soh = dataset_val.loc[(dataset_val['cycle'] >= 1), ['cycle']]\n",
        "new_soh['SoH'] =  soh\n",
        "new_soh['NewSoH'] = soh_pred\n",
        "new_soh = new_soh.groupby(['cycle']).mean().reset_index()\n",
        "print(new_soh.head(10))\n",
        "rms = np.sqrt(mean_squared_error(new_soh['SoH'], new_soh['NewSoH']))\n",
        "print('Root Mean Square Error: ', rms)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-91WoM1DMaoG",
        "outputId": "c64bb7f3-18f5-4b14-e3ff-7e7104cf8b09"
      },
      "execution_count": 314,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(50285, 1)\n",
            "   cycle       SoH    NewSoH\n",
            "0      1  1.000000  0.963285\n",
            "1      2  0.994492  0.959180\n",
            "2      3  0.994506  0.959189\n",
            "3      4  0.994563  0.959237\n",
            "4      5  0.993865  0.958722\n",
            "5      6  0.994526  0.959221\n",
            "6      7  0.994121  0.958911\n",
            "7      8  0.994953  0.959525\n",
            "8      9  0.988704  0.954888\n",
            "9     10  0.988895  0.955033\n",
            "Root Mean Square Error:  0.021596721172344773\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "Q0BOcdxfTnr_"
      },
      "execution_count": 314,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plot_df = new_soh.loc[(new_soh['cycle']>=1),['cycle','SoH', 'NewSoH']]\n",
        "sns.set_style(\"white\")\n",
        "plt.figure(figsize=(16, 10))\n",
        "plt.plot(plot_df['cycle'], plot_df['SoH'], label='SoH')\n",
        "plt.plot(plot_df['cycle'], plot_df['NewSoH'], label='Predicted SoH')\n",
        "#Draw threshold\n",
        "#plt.plot([0.,len(capacity)], [0.70, 0.70], label='Threshold')\n",
        "plt.ylabel('SOH')\n",
        "# make x-axis ticks legible\n",
        "adf = plt.gca().get_xaxis().get_major_formatter()\n",
        "plt.xlabel('cycle')\n",
        "plt.legend()\n",
        "plt.title('Discharge B0007')"
      ],
      "metadata": {
        "id": "aiRUmM5BpxJH",
        "outputId": "19774756-34c4-4273-a4e8-14d9cd2d6d8c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 639
        }
      },
      "execution_count": 315,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Discharge B0007')"
            ]
          },
          "metadata": {},
          "execution_count": 315
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1152x720 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset_val, capacity_val = load_data('B0007')\n",
        "attrib=['cycle', 'datetime', 'capacity']\n",
        "dis_ele = capacity_val[attrib]\n",
        "rows=['cycle','capacity']\n",
        "dataset=dis_ele[rows]\n",
        "data_train=dataset[(dataset['cycle']<50)]\n",
        "data_set_train=data_train.iloc[:,1:2].values\n",
        "data_test=dataset[(dataset['cycle']>=50)]\n",
        "data_set_test=data_test.iloc[:,1:2].values\n",
        "\n",
        "sc=MinMaxScaler(feature_range=(0,1))\n",
        "data_set_train=sc.fit_transform(data_set_train)\n",
        "data_set_test=sc.transform(data_set_test)\n",
        "\n",
        "X_train=[]\n",
        "y_train=[]\n",
        "#take the last 10t to predict 10t+1\n",
        "for i in range(10,49):\n",
        "    X_train.append(data_set_train[i-10:i,0])\n",
        "    y_train.append(data_set_train[i,0])\n",
        "X_train,y_train=np.array(X_train),np.array(y_train)\n",
        " \n",
        "X_train=np.reshape(X_train,(X_train.shape[0],X_train.shape[1],1))"
      ],
      "metadata": {
        "id": "TSsKq2LCrkhq",
        "outputId": "616b23a4-e114-4256-d56a-d7e0fd07f6cb",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 316,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Total data in dataset:  616\n",
            "[1, 24, datetime.datetime(2008, 4, 2, 15, 25, 41), 1.89105229539079, 4.199359521791473, -0.0018658918833680202, 23.93704394613529, -0.0004, 0.0, 0.0]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "regress = Sequential()\n",
        "regress.add(LSTM(units=200, return_sequences=True, input_shape=(X_train.shape[1],1)))\n",
        "regress.add(Dropout(0.3))\n",
        "regress.add(LSTM(units=200, return_sequences=True))\n",
        "regress.add(Dropout(0.3))\n",
        "regress.add(LSTM(units=200, return_sequences=True))\n",
        "regress.add(Dropout(0.3))\n",
        "regress.add(LSTM(units=200))\n",
        "regress.add(Dropout(0.3))\n",
        "regress.add(Dense(units=1))\n",
        "regress.compile(optimizer='adam',loss='mean_squared_error')\n",
        "regress.summary()"
      ],
      "metadata": {
        "id": "ZmmSjVK-ro_J",
        "outputId": "93154246-da4b-47bc-c044-01e936f3aecc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 317,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_29\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " lstm_60 (LSTM)              (None, 10, 200)           161600    \n",
            "                                                                 \n",
            " dropout_74 (Dropout)        (None, 10, 200)           0         \n",
            "                                                                 \n",
            " lstm_61 (LSTM)              (None, 10, 200)           320800    \n",
            "                                                                 \n",
            " dropout_75 (Dropout)        (None, 10, 200)           0         \n",
            "                                                                 \n",
            " lstm_62 (LSTM)              (None, 10, 200)           320800    \n",
            "                                                                 \n",
            " dropout_76 (Dropout)        (None, 10, 200)           0         \n",
            "                                                                 \n",
            " lstm_63 (LSTM)              (None, 200)               320800    \n",
            "                                                                 \n",
            " dropout_77 (Dropout)        (None, 200)               0         \n",
            "                                                                 \n",
            " dense_71 (Dense)            (None, 1)                 201       \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 1,124,201\n",
            "Trainable params: 1,124,201\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "regress.fit(X_train,y_train,epochs=200,batch_size=25)"
      ],
      "metadata": {
        "id": "-6psmuVTrtiT",
        "outputId": "4271c469-ba06-48ca-86bc-ea612d29ca92",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 318,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/200\n",
            "2/2 [==============================] - 7s 120ms/step - loss: 0.3433\n",
            "Epoch 2/200\n",
            "2/2 [==============================] - 0s 99ms/step - loss: 0.1146\n",
            "Epoch 3/200\n",
            "2/2 [==============================] - 0s 95ms/step - loss: 0.1278\n",
            "Epoch 4/200\n",
            "2/2 [==============================] - 0s 100ms/step - loss: 0.0554\n",
            "Epoch 5/200\n",
            "2/2 [==============================] - 0s 101ms/step - loss: 0.0945\n",
            "Epoch 6/200\n",
            "2/2 [==============================] - 0s 98ms/step - loss: 0.0836\n",
            "Epoch 7/200\n",
            "2/2 [==============================] - 0s 97ms/step - loss: 0.0355\n",
            "Epoch 8/200\n",
            "2/2 [==============================] - 0s 98ms/step - loss: 0.0453\n",
            "Epoch 9/200\n",
            "2/2 [==============================] - 0s 95ms/step - loss: 0.0568\n",
            "Epoch 10/200\n",
            "2/2 [==============================] - 0s 104ms/step - loss: 0.0373\n",
            "Epoch 11/200\n",
            "2/2 [==============================] - 0s 103ms/step - loss: 0.0440\n",
            "Epoch 12/200\n",
            "2/2 [==============================] - 0s 102ms/step - loss: 0.0492\n",
            "Epoch 13/200\n",
            "2/2 [==============================] - 0s 102ms/step - loss: 0.0420\n",
            "Epoch 14/200\n",
            "2/2 [==============================] - 0s 98ms/step - loss: 0.0384\n",
            "Epoch 15/200\n",
            "2/2 [==============================] - 0s 121ms/step - loss: 0.0472\n",
            "Epoch 16/200\n",
            "2/2 [==============================] - 0s 100ms/step - loss: 0.0403\n",
            "Epoch 17/200\n",
            "2/2 [==============================] - 0s 99ms/step - loss: 0.0408\n",
            "Epoch 18/200\n",
            "2/2 [==============================] - 0s 104ms/step - loss: 0.0399\n",
            "Epoch 19/200\n",
            "2/2 [==============================] - 0s 95ms/step - loss: 0.0427\n",
            "Epoch 20/200\n",
            "2/2 [==============================] - 0s 92ms/step - loss: 0.0341\n",
            "Epoch 21/200\n",
            "2/2 [==============================] - 0s 93ms/step - loss: 0.0375\n",
            "Epoch 22/200\n",
            "2/2 [==============================] - 0s 97ms/step - loss: 0.0366\n",
            "Epoch 23/200\n",
            "2/2 [==============================] - 0s 103ms/step - loss: 0.0378\n",
            "Epoch 24/200\n",
            "2/2 [==============================] - 0s 93ms/step - loss: 0.0300\n",
            "Epoch 25/200\n",
            "2/2 [==============================] - 0s 102ms/step - loss: 0.0307\n",
            "Epoch 26/200\n",
            "2/2 [==============================] - 0s 99ms/step - loss: 0.0317\n",
            "Epoch 27/200\n",
            "2/2 [==============================] - 0s 92ms/step - loss: 0.0320\n",
            "Epoch 28/200\n",
            "2/2 [==============================] - 0s 101ms/step - loss: 0.0345\n",
            "Epoch 29/200\n",
            "2/2 [==============================] - 0s 106ms/step - loss: 0.0305\n",
            "Epoch 30/200\n",
            "2/2 [==============================] - 0s 93ms/step - loss: 0.0282\n",
            "Epoch 31/200\n",
            "2/2 [==============================] - 0s 96ms/step - loss: 0.0308\n",
            "Epoch 32/200\n",
            "2/2 [==============================] - 0s 96ms/step - loss: 0.0259\n",
            "Epoch 33/200\n",
            "2/2 [==============================] - 0s 97ms/step - loss: 0.0316\n",
            "Epoch 34/200\n",
            "2/2 [==============================] - 0s 110ms/step - loss: 0.0280\n",
            "Epoch 35/200\n",
            "2/2 [==============================] - 0s 94ms/step - loss: 0.0317\n",
            "Epoch 36/200\n",
            "2/2 [==============================] - 0s 100ms/step - loss: 0.0263\n",
            "Epoch 37/200\n",
            "2/2 [==============================] - 0s 101ms/step - loss: 0.0299\n",
            "Epoch 38/200\n",
            "2/2 [==============================] - 0s 94ms/step - loss: 0.0297\n",
            "Epoch 39/200\n",
            "2/2 [==============================] - 0s 98ms/step - loss: 0.0271\n",
            "Epoch 40/200\n",
            "2/2 [==============================] - 0s 98ms/step - loss: 0.0291\n",
            "Epoch 41/200\n",
            "2/2 [==============================] - 0s 97ms/step - loss: 0.0257\n",
            "Epoch 42/200\n",
            "2/2 [==============================] - 0s 96ms/step - loss: 0.0254\n",
            "Epoch 43/200\n",
            "2/2 [==============================] - 0s 110ms/step - loss: 0.0291\n",
            "Epoch 44/200\n",
            "2/2 [==============================] - 0s 103ms/step - loss: 0.0323\n",
            "Epoch 45/200\n",
            "2/2 [==============================] - 0s 90ms/step - loss: 0.0263\n",
            "Epoch 46/200\n",
            "2/2 [==============================] - 0s 104ms/step - loss: 0.0317\n",
            "Epoch 47/200\n",
            "2/2 [==============================] - 0s 96ms/step - loss: 0.0272\n",
            "Epoch 48/200\n",
            "2/2 [==============================] - 0s 113ms/step - loss: 0.0294\n",
            "Epoch 49/200\n",
            "2/2 [==============================] - 0s 95ms/step - loss: 0.0238\n",
            "Epoch 50/200\n",
            "2/2 [==============================] - 0s 96ms/step - loss: 0.0296\n",
            "Epoch 51/200\n",
            "2/2 [==============================] - 0s 92ms/step - loss: 0.0294\n",
            "Epoch 52/200\n",
            "2/2 [==============================] - 0s 94ms/step - loss: 0.0275\n",
            "Epoch 53/200\n",
            "2/2 [==============================] - 0s 99ms/step - loss: 0.0277\n",
            "Epoch 54/200\n",
            "2/2 [==============================] - 0s 104ms/step - loss: 0.0335\n",
            "Epoch 55/200\n",
            "2/2 [==============================] - 0s 98ms/step - loss: 0.0273\n",
            "Epoch 56/200\n",
            "2/2 [==============================] - 0s 98ms/step - loss: 0.0230\n",
            "Epoch 57/200\n",
            "2/2 [==============================] - 0s 110ms/step - loss: 0.0258\n",
            "Epoch 58/200\n",
            "2/2 [==============================] - 0s 107ms/step - loss: 0.0289\n",
            "Epoch 59/200\n",
            "2/2 [==============================] - 0s 108ms/step - loss: 0.0277\n",
            "Epoch 60/200\n",
            "2/2 [==============================] - 0s 107ms/step - loss: 0.0253\n",
            "Epoch 61/200\n",
            "2/2 [==============================] - 0s 98ms/step - loss: 0.0262\n",
            "Epoch 62/200\n",
            "2/2 [==============================] - 0s 110ms/step - loss: 0.0331\n",
            "Epoch 63/200\n",
            "2/2 [==============================] - 0s 104ms/step - loss: 0.0274\n",
            "Epoch 64/200\n",
            "2/2 [==============================] - 0s 94ms/step - loss: 0.0321\n",
            "Epoch 65/200\n",
            "2/2 [==============================] - 0s 99ms/step - loss: 0.0252\n",
            "Epoch 66/200\n",
            "2/2 [==============================] - 0s 114ms/step - loss: 0.0266\n",
            "Epoch 67/200\n",
            "2/2 [==============================] - 0s 96ms/step - loss: 0.0292\n",
            "Epoch 68/200\n",
            "2/2 [==============================] - 0s 95ms/step - loss: 0.0247\n",
            "Epoch 69/200\n",
            "2/2 [==============================] - 0s 106ms/step - loss: 0.0325\n",
            "Epoch 70/200\n",
            "2/2 [==============================] - 0s 95ms/step - loss: 0.0312\n",
            "Epoch 71/200\n",
            "2/2 [==============================] - 0s 111ms/step - loss: 0.0277\n",
            "Epoch 72/200\n",
            "2/2 [==============================] - 0s 103ms/step - loss: 0.0283\n",
            "Epoch 73/200\n",
            "2/2 [==============================] - 0s 96ms/step - loss: 0.0257\n",
            "Epoch 74/200\n",
            "2/2 [==============================] - 0s 104ms/step - loss: 0.0249\n",
            "Epoch 75/200\n",
            "2/2 [==============================] - 0s 109ms/step - loss: 0.0304\n",
            "Epoch 76/200\n",
            "2/2 [==============================] - 0s 106ms/step - loss: 0.0310\n",
            "Epoch 77/200\n",
            "2/2 [==============================] - 0s 92ms/step - loss: 0.0225\n",
            "Epoch 78/200\n",
            "2/2 [==============================] - 0s 114ms/step - loss: 0.0291\n",
            "Epoch 79/200\n",
            "2/2 [==============================] - 0s 101ms/step - loss: 0.0270\n",
            "Epoch 80/200\n",
            "2/2 [==============================] - 0s 97ms/step - loss: 0.0244\n",
            "Epoch 81/200\n",
            "2/2 [==============================] - 0s 92ms/step - loss: 0.0281\n",
            "Epoch 82/200\n",
            "2/2 [==============================] - 0s 95ms/step - loss: 0.0223\n",
            "Epoch 83/200\n",
            "2/2 [==============================] - 0s 96ms/step - loss: 0.0280\n",
            "Epoch 84/200\n",
            "2/2 [==============================] - 0s 91ms/step - loss: 0.0282\n",
            "Epoch 85/200\n",
            "2/2 [==============================] - 0s 125ms/step - loss: 0.0235\n",
            "Epoch 86/200\n",
            "2/2 [==============================] - 0s 98ms/step - loss: 0.0341\n",
            "Epoch 87/200\n",
            "2/2 [==============================] - 0s 99ms/step - loss: 0.0254\n",
            "Epoch 88/200\n",
            "2/2 [==============================] - 0s 97ms/step - loss: 0.0333\n",
            "Epoch 89/200\n",
            "2/2 [==============================] - 0s 94ms/step - loss: 0.0283\n",
            "Epoch 90/200\n",
            "2/2 [==============================] - 0s 109ms/step - loss: 0.0320\n",
            "Epoch 91/200\n",
            "2/2 [==============================] - 0s 98ms/step - loss: 0.0258\n",
            "Epoch 92/200\n",
            "2/2 [==============================] - 0s 96ms/step - loss: 0.0254\n",
            "Epoch 93/200\n",
            "2/2 [==============================] - 0s 96ms/step - loss: 0.0245\n",
            "Epoch 94/200\n",
            "2/2 [==============================] - 0s 103ms/step - loss: 0.0320\n",
            "Epoch 95/200\n",
            "2/2 [==============================] - 0s 90ms/step - loss: 0.0269\n",
            "Epoch 96/200\n",
            "2/2 [==============================] - 0s 100ms/step - loss: 0.0267\n",
            "Epoch 97/200\n",
            "2/2 [==============================] - 0s 106ms/step - loss: 0.0261\n",
            "Epoch 98/200\n",
            "2/2 [==============================] - 0s 96ms/step - loss: 0.0262\n",
            "Epoch 99/200\n",
            "2/2 [==============================] - 0s 103ms/step - loss: 0.0330\n",
            "Epoch 100/200\n",
            "2/2 [==============================] - 0s 112ms/step - loss: 0.0270\n",
            "Epoch 101/200\n",
            "2/2 [==============================] - 0s 99ms/step - loss: 0.0316\n",
            "Epoch 102/200\n",
            "2/2 [==============================] - 0s 94ms/step - loss: 0.0327\n",
            "Epoch 103/200\n",
            "2/2 [==============================] - 0s 107ms/step - loss: 0.0245\n",
            "Epoch 104/200\n",
            "2/2 [==============================] - 0s 117ms/step - loss: 0.0284\n",
            "Epoch 105/200\n",
            "2/2 [==============================] - 0s 92ms/step - loss: 0.0253\n",
            "Epoch 106/200\n",
            "2/2 [==============================] - 0s 101ms/step - loss: 0.0244\n",
            "Epoch 107/200\n",
            "2/2 [==============================] - 0s 97ms/step - loss: 0.0226\n",
            "Epoch 108/200\n",
            "2/2 [==============================] - 0s 90ms/step - loss: 0.0297\n",
            "Epoch 109/200\n",
            "2/2 [==============================] - 0s 93ms/step - loss: 0.0218\n",
            "Epoch 110/200\n",
            "2/2 [==============================] - 0s 112ms/step - loss: 0.0258\n",
            "Epoch 111/200\n",
            "2/2 [==============================] - 0s 97ms/step - loss: 0.0228\n",
            "Epoch 112/200\n",
            "2/2 [==============================] - 0s 92ms/step - loss: 0.0313\n",
            "Epoch 113/200\n",
            "2/2 [==============================] - 0s 100ms/step - loss: 0.0248\n",
            "Epoch 114/200\n",
            "2/2 [==============================] - 0s 99ms/step - loss: 0.0260\n",
            "Epoch 115/200\n",
            "2/2 [==============================] - 0s 101ms/step - loss: 0.0260\n",
            "Epoch 116/200\n",
            "2/2 [==============================] - 0s 102ms/step - loss: 0.0259\n",
            "Epoch 117/200\n",
            "2/2 [==============================] - 0s 102ms/step - loss: 0.0223\n",
            "Epoch 118/200\n",
            "2/2 [==============================] - 0s 105ms/step - loss: 0.0223\n",
            "Epoch 119/200\n",
            "2/2 [==============================] - 0s 112ms/step - loss: 0.0268\n",
            "Epoch 120/200\n",
            "2/2 [==============================] - 0s 102ms/step - loss: 0.0230\n",
            "Epoch 121/200\n",
            "2/2 [==============================] - 0s 95ms/step - loss: 0.0343\n",
            "Epoch 122/200\n",
            "2/2 [==============================] - 0s 98ms/step - loss: 0.0324\n",
            "Epoch 123/200\n",
            "2/2 [==============================] - 0s 108ms/step - loss: 0.0254\n",
            "Epoch 124/200\n",
            "2/2 [==============================] - 0s 96ms/step - loss: 0.0268\n",
            "Epoch 125/200\n",
            "2/2 [==============================] - 0s 98ms/step - loss: 0.0235\n",
            "Epoch 126/200\n",
            "2/2 [==============================] - 0s 111ms/step - loss: 0.0233\n",
            "Epoch 127/200\n",
            "2/2 [==============================] - 0s 101ms/step - loss: 0.0224\n",
            "Epoch 128/200\n",
            "2/2 [==============================] - 0s 92ms/step - loss: 0.0239\n",
            "Epoch 129/200\n",
            "2/2 [==============================] - 0s 97ms/step - loss: 0.0247\n",
            "Epoch 130/200\n",
            "2/2 [==============================] - 0s 96ms/step - loss: 0.0228\n",
            "Epoch 131/200\n",
            "2/2 [==============================] - 0s 94ms/step - loss: 0.0225\n",
            "Epoch 132/200\n",
            "2/2 [==============================] - 0s 119ms/step - loss: 0.0223\n",
            "Epoch 133/200\n",
            "2/2 [==============================] - 0s 98ms/step - loss: 0.0224\n",
            "Epoch 134/200\n",
            "2/2 [==============================] - 0s 98ms/step - loss: 0.0241\n",
            "Epoch 135/200\n",
            "2/2 [==============================] - 0s 93ms/step - loss: 0.0259\n",
            "Epoch 136/200\n",
            "2/2 [==============================] - 0s 96ms/step - loss: 0.0234\n",
            "Epoch 137/200\n",
            "2/2 [==============================] - 0s 107ms/step - loss: 0.0256\n",
            "Epoch 138/200\n",
            "2/2 [==============================] - 0s 99ms/step - loss: 0.0224\n",
            "Epoch 139/200\n",
            "2/2 [==============================] - 0s 101ms/step - loss: 0.0219\n",
            "Epoch 140/200\n",
            "2/2 [==============================] - 0s 96ms/step - loss: 0.0192\n",
            "Epoch 141/200\n",
            "2/2 [==============================] - 0s 97ms/step - loss: 0.0261\n",
            "Epoch 142/200\n",
            "2/2 [==============================] - 0s 92ms/step - loss: 0.0247\n",
            "Epoch 143/200\n",
            "2/2 [==============================] - 0s 99ms/step - loss: 0.0209\n",
            "Epoch 144/200\n",
            "2/2 [==============================] - 0s 97ms/step - loss: 0.0202\n",
            "Epoch 145/200\n",
            "2/2 [==============================] - 0s 100ms/step - loss: 0.0251\n",
            "Epoch 146/200\n",
            "2/2 [==============================] - 0s 94ms/step - loss: 0.0249\n",
            "Epoch 147/200\n",
            "2/2 [==============================] - 0s 100ms/step - loss: 0.0242\n",
            "Epoch 148/200\n",
            "2/2 [==============================] - 0s 95ms/step - loss: 0.0233\n",
            "Epoch 149/200\n",
            "2/2 [==============================] - 0s 89ms/step - loss: 0.0256\n",
            "Epoch 150/200\n",
            "2/2 [==============================] - 0s 94ms/step - loss: 0.0202\n",
            "Epoch 151/200\n",
            "2/2 [==============================] - 0s 125ms/step - loss: 0.0229\n",
            "Epoch 152/200\n",
            "2/2 [==============================] - 0s 95ms/step - loss: 0.0213\n",
            "Epoch 153/200\n",
            "2/2 [==============================] - 0s 99ms/step - loss: 0.0269\n",
            "Epoch 154/200\n",
            "2/2 [==============================] - 0s 96ms/step - loss: 0.0222\n",
            "Epoch 155/200\n",
            "2/2 [==============================] - 0s 98ms/step - loss: 0.0229\n",
            "Epoch 156/200\n",
            "2/2 [==============================] - 0s 95ms/step - loss: 0.0204\n",
            "Epoch 157/200\n",
            "2/2 [==============================] - 0s 97ms/step - loss: 0.0205\n",
            "Epoch 158/200\n",
            "2/2 [==============================] - 0s 107ms/step - loss: 0.0161\n",
            "Epoch 159/200\n",
            "2/2 [==============================] - 0s 114ms/step - loss: 0.0281\n",
            "Epoch 160/200\n",
            "2/2 [==============================] - 0s 101ms/step - loss: 0.0249\n",
            "Epoch 161/200\n",
            "2/2 [==============================] - 0s 102ms/step - loss: 0.0313\n",
            "Epoch 162/200\n",
            "2/2 [==============================] - 0s 110ms/step - loss: 0.0254\n",
            "Epoch 163/200\n",
            "2/2 [==============================] - 0s 94ms/step - loss: 0.0231\n",
            "Epoch 164/200\n",
            "2/2 [==============================] - 0s 93ms/step - loss: 0.0267\n",
            "Epoch 165/200\n",
            "2/2 [==============================] - 0s 116ms/step - loss: 0.0215\n",
            "Epoch 166/200\n",
            "2/2 [==============================] - 0s 98ms/step - loss: 0.0319\n",
            "Epoch 167/200\n",
            "2/2 [==============================] - 0s 103ms/step - loss: 0.0191\n",
            "Epoch 168/200\n",
            "2/2 [==============================] - 0s 91ms/step - loss: 0.0300\n",
            "Epoch 169/200\n",
            "2/2 [==============================] - 0s 92ms/step - loss: 0.0200\n",
            "Epoch 170/200\n",
            "2/2 [==============================] - 0s 107ms/step - loss: 0.0291\n",
            "Epoch 171/200\n",
            "2/2 [==============================] - 0s 98ms/step - loss: 0.0237\n",
            "Epoch 172/200\n",
            "2/2 [==============================] - 0s 103ms/step - loss: 0.0200\n",
            "Epoch 173/200\n",
            "2/2 [==============================] - 0s 105ms/step - loss: 0.0232\n",
            "Epoch 174/200\n",
            "2/2 [==============================] - 0s 99ms/step - loss: 0.0230\n",
            "Epoch 175/200\n",
            "2/2 [==============================] - 0s 97ms/step - loss: 0.0186\n",
            "Epoch 176/200\n",
            "2/2 [==============================] - 0s 96ms/step - loss: 0.0246\n",
            "Epoch 177/200\n",
            "2/2 [==============================] - 0s 94ms/step - loss: 0.0217\n",
            "Epoch 178/200\n",
            "2/2 [==============================] - 0s 105ms/step - loss: 0.0201\n",
            "Epoch 179/200\n",
            "2/2 [==============================] - 0s 91ms/step - loss: 0.0238\n",
            "Epoch 180/200\n",
            "2/2 [==============================] - 0s 100ms/step - loss: 0.0226\n",
            "Epoch 181/200\n",
            "2/2 [==============================] - 0s 108ms/step - loss: 0.0221\n",
            "Epoch 182/200\n",
            "2/2 [==============================] - 0s 104ms/step - loss: 0.0190\n",
            "Epoch 183/200\n",
            "2/2 [==============================] - 0s 102ms/step - loss: 0.0211\n",
            "Epoch 184/200\n",
            "2/2 [==============================] - 0s 117ms/step - loss: 0.0185\n",
            "Epoch 185/200\n",
            "2/2 [==============================] - 0s 102ms/step - loss: 0.0215\n",
            "Epoch 186/200\n",
            "2/2 [==============================] - 0s 95ms/step - loss: 0.0234\n",
            "Epoch 187/200\n",
            "2/2 [==============================] - 0s 95ms/step - loss: 0.0194\n",
            "Epoch 188/200\n",
            "2/2 [==============================] - 0s 95ms/step - loss: 0.0208\n",
            "Epoch 189/200\n",
            "2/2 [==============================] - 0s 100ms/step - loss: 0.0238\n",
            "Epoch 190/200\n",
            "2/2 [==============================] - 0s 101ms/step - loss: 0.0251\n",
            "Epoch 191/200\n",
            "2/2 [==============================] - 0s 94ms/step - loss: 0.0215\n",
            "Epoch 192/200\n",
            "2/2 [==============================] - 0s 100ms/step - loss: 0.0243\n",
            "Epoch 193/200\n",
            "2/2 [==============================] - 0s 96ms/step - loss: 0.0216\n",
            "Epoch 194/200\n",
            "2/2 [==============================] - 0s 94ms/step - loss: 0.0183\n",
            "Epoch 195/200\n",
            "2/2 [==============================] - 0s 99ms/step - loss: 0.0246\n",
            "Epoch 196/200\n",
            "2/2 [==============================] - 0s 99ms/step - loss: 0.0201\n",
            "Epoch 197/200\n",
            "2/2 [==============================] - 0s 93ms/step - loss: 0.0206\n",
            "Epoch 198/200\n",
            "2/2 [==============================] - 0s 104ms/step - loss: 0.0237\n",
            "Epoch 199/200\n",
            "2/2 [==============================] - 0s 97ms/step - loss: 0.0225\n",
            "Epoch 200/200\n",
            "2/2 [==============================] - 0s 96ms/step - loss: 0.0175\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7fa4000e4750>"
            ]
          },
          "metadata": {},
          "execution_count": 318
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(len(data_test))\n",
        "data_total=pd.concat((data_train['capacity'], data_test['capacity']),axis=0)\n",
        "inputs=data_total[len(data_total)-len(data_test)-10:].values\n",
        "inputs=inputs.reshape(-1,1)\n",
        "inputs=sc.transform(inputs)"
      ],
      "metadata": {
        "id": "SHlnjFBPrwOR",
        "outputId": "fac50553-6c1a-4f23-e91f-953630f5a302",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 319,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "119\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_test=[]\n",
        "for i in range(10,129):\n",
        "    X_test.append(inputs[i-10:i,0])\n",
        "X_test=np.array(X_test)\n",
        "X_test=np.reshape(X_test,(X_test.shape[0],X_test.shape[1],1))\n",
        "pred=regress.predict(X_test)\n",
        "print(pred.shape)\n",
        "pred=sc.inverse_transform(pred)\n",
        "pred=pred[:,0]\n",
        "tests=data_test.iloc[:,1:2]\n",
        "rmse = np.sqrt(mean_squared_error(tests, pred))\n",
        "print('Test RMSE: %.3f' % rmse)\n",
        "metrics.r2_score(tests,pred)"
      ],
      "metadata": {
        "id": "2fspYuNJr0Ra",
        "outputId": "ef512124-1447-4d49-9ebb-3e4e2648b853",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 320,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(119, 1)\n",
            "Test RMSE: 0.047\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8033991674580762"
            ]
          },
          "metadata": {},
          "execution_count": 320
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "ln = len(data_train)\n",
        "data_test['pre']=pred\n",
        "plot_df = dataset.loc[(dataset['cycle']>=1),['cycle','capacity']]\n",
        "plot_per = data_test.loc[(data_test['cycle']>=ln),['cycle','pre']]\n",
        "plt.figure(figsize=(16, 10))\n",
        "plt.plot(plot_df['cycle'], plot_df['capacity'], label=\"Actual data\", color='blue')\n",
        "plt.plot(plot_per['cycle'],plot_per['pre'],label=\"Prediction data\", color='red')\n",
        "#Draw threshold\n",
        "plt.plot([0.,168], [1.38, 1.38],dashes=[6, 2], label=\"treshold\")\n",
        "plt.ylabel('Capacity')\n",
        "# make x-axis ticks legible\n",
        "adf = plt.gca().get_xaxis().get_major_formatter()\n",
        "plt.xlabel('cycle')\n",
        "plt.legend()\n",
        "plt.title('Discharge B0007 (prediction) start in cycle 50 -RULe=-8, window-size=10')"
      ],
      "metadata": {
        "id": "ejrvqp6Sr3uA",
        "outputId": "1653c856-32e8-4309-dfa5-9b2cf685ede8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 749
        }
      },
      "execution_count": 321,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:3: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  This is separate from the ipykernel package so we can avoid doing imports until\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Discharge B0007 (prediction) start in cycle 50 -RULe=-8, window-size=10')"
            ]
          },
          "metadata": {},
          "execution_count": 321
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1152x720 with 1 Axes>"
            ],
            "image/png": "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n7lz59p+tPH09OS5556jRIkStr+bXl5eFC5cmLx58yZ6zV27dtGoUSO8vLyYOHEi06dPjzd2fO/evVy6dImBAwfauibHVME7duxInTp16NKlC15eXrRu3TrZPzDG1rVrVypUqMChQ4cYO3YsFSpUsE2mVaNGDbp160bHjh2pVasWTz75pF3GX4tI+rNYUzLTgojII+LLL79k48aNcSqzj6LQ0FBee+01Vq9ejYeHBx06dKBp06a0atXK0aE9FEuWLOH8+fPJ6s75KBo5ciT58+e3TZ4jGUNQUBBffvklH374oaNDERHJtDRGVkQeCxcvXuTvv//Gy8uL06dPs2DBAtvYrkdZnjx5+O677xwdhsN06NDB0SE4TEhICFu2bNGamBlQzORFIiKSekpkReSxEBkZybhx4wgJCSF79uw0atSI1157zdFhiaSLGTNmsGjRInr06JHkzNYiIiKZlboWi4iIiIiISKaiyZ5EREREREQkU8l0XYsrV678wHXhREREREREJHM6e/ZsgutOx5bpEtknn3wy0XXXREREREREJHOLvURYYtS1WERERERERDIVJbIiIiIiIiKSqSiRFRERERERkUwl042RFRERERERiS0yMpKQkBDCw8MdHYqkgIeHB0WKFMHV1TXF5yqRFRERERGRTC0kJITs2bPz9NNPY7FYHB2OJIPVauXy5cuEhIRQvHjxFJ+vrsUiIiIiIpKphYeHkzdvXiWxmYjFYiFv3ryprqIrkRURERERkUxPSWzmk5bXTImsiIiIiIiIZCpKZEVEREREROxg69atlC5dmpMnTz7w2IULF3L79u1UXyswMJDx48c/8Lg6deoQGhqa5DFz585NdRyOokRWRERERETEDtavX0+lSpXYsGHDA49dvHhxmhJZe/rkk08cHUKKadZiERERERGRNAoLC+Pnn39m8eLF9OrViwEDBgAQHR3NBx98wK5du7BYLLRu3Rqr1crFixfp1KkTuXLlYsmSJXh5eXHo0CEAvvvuO7Zv3857773HDz/8wMcff0xkZCS5cuXigw8+IF++fInGceXKFYYOHcqFCxeoWLEiVqvVtq9Pnz78888/3Llzh44dO/Lqq6/ywQcfEB4ejr+/PyVKlGDatGkJHpfRpFsiO3LkSLZv307evHlZv359vP3Xrl1j1KhR/PXXX7i7uzNp0iRKlSqVXuGIiIiIiMhjYPFi+Pxz+7bZpQt07Jj0Md9//z0vvvgixYsXJ3fu3Pz++++UK1eO5cuXc/bsWVavXo2LiwtXr14lV65cLFy4kEWLFpEnT54k261UqRJff/01FouFb775hvnz5zNixIhEj589ezbe3t7069eP7du3s2LFCtu+SZMmkStXLsLDw2nZsiUvv/wyw4YNY+nSpaxZsybJ43Lnzp28J+shSbdENiAggPbt2/Pmm28muH/u3LmULVuW2bNnc/LkScaPH8+iRYvSKxwREREREZF0s2HDBjr+f7bbsGFDNmzYQLly5di7dy9t2rTBxcWkXrly5UpRu//88w+DBw/m33//JSIigiJFiiR5/IEDB5g1axYAtWrVImfOnLZ9S5YsYcuWLQCcP3+eM2fOJJigJvc4R0q3RNbX15eQkJBE9588eZIePXoA8Mwzz3D27FkuXbqUZJlcREREREQkKR07Prh6am9Xr17lp59+4vjx41gsFqKjo7FYLAwfPjxV7d25c8f27wkTJvD6669Tt25d9u3bZ0tSU2rfvn38+OOPLF++nCxZstChQ4c410npcY7msMmeypQpw+bNmwE4fPgw586d459//nFUOCIiIiIiIqmyadMm/P392bZtGz/88AM7duygSJEiBAUFUa1aNZYvX05UVBRgkl6ArFmzEhYWZmsjX758nDx5krt377J161bb9hs3blCgQAEAVq9e/cBYfH19WbduHQA7duzg2rVrtnZy5sxJlixZOHnyJL/88ovtHBcXFyIjIx94XEbisES2R48e3LhxA39/f5YsWULZsmVxdnZ2VDgiIiIiIiKpsn79el566aU4215++WXWr19Pq1atKFSoEE2bNqVp06a2+YNat25Nt27d6NChAwBDhw6lZ8+etGnThieeeMLWTr9+/Rg4cCABAQHJ6pbct29fgoKCaNSoEVu2bKFw4cIA1KhRg6ioKBo0aMC0adOoWLGi7ZzWrVvTtGlThg4dmuRxGYnFGnsaKzsLCQmhV69eCU72FJvVaqVu3bqsXbuWbNmyJXlsQEAAgYGB9gxTREREREQysSNHjlC2bFlHhyGpkNBrl5ycz2EV2evXrxMREQHAN998g4+PzwOTWBEREREREZF0m+xpyJAh7N+/nytXrlCjRg369+9v6xfetm1bTp48aZs2umTJkkycODG9QhEREREREZFHSLolsh9++GGS+728vNi0aVN6XV5EREREREQeUQ7rWiwiIiIiIiKSGkpkRUREREREJFNRIpvOoqKgSRM4dMjRkYiIiIiIiDwalMimM6sVDhyAN990dCQiIiIiIpJeypYti7+/P40bN2bAgAHcvn071W2NGDGC7777DoDRo0dz4sSJRI/dt28fBw8etP1/2bJlrF69OtXXTk5MiQkMDOTChQt2v3ZClMimM1dXGDoUtmwxCa2IiIiIiDx6PDw8WLNmDevXr8fV1ZWvvvoqzv6YFVxSauLEiZQoUSLR/fv37+dQrO6fbdu2pVmzZqm6Vn5lEXIAACAASURBVFqtWrWKixcvPpRrpdusxXJPr14weTJMnAjp8OOIiIiIiIhkID4+Phw7dox9+/Yxc+ZMcuTIwalTp9i4cSMffPAB+/fvJyIignbt2tGmTRusVivvvvsue/bsoVChQri6utra6tChA8OHD6d8+fLs3LmT6dOnEx0dTe7cuZk4cSJfffUVTk5OrF27lrFjx7J37148PT3p2rUrR44cYdy4cdy+fZunnnqKSZMmkTNnTjp06ECFChXYt28fN27cYOLEifj4+MR5DEnFNGvWLLZt28adO3fw8vJi/PjxbNq0id9//51hw4bh4eHB8uXLmT9/frzjLBaLXZ5jJbIPQfbsMGAAvPMO/PYblC/v6IhERERERB5RixfD55/bt80uXaBjx2QdGhUVxc6dO3nxxRcB+OOPP1i3bh1FixZl+fLlZM+enZUrVxIREUGbNm2oXr06R44csSW6ly5dolGjRrRo0SJOu6GhoYwdO5YvvviCokWLcvXqVXLlykWbNm1siSvA3r17becMHz6csWPH4ufnx8yZM5k1axajR48GIDo6mhUrVrBjxw5mzZrFwoUL41xvy5YticbUvn17+vXrB8Abb7zBtm3bqF+/PkuXLrUl3YkdV6dOnZQ884lSIvuQDBgA06aZyuyXXzo6GhERERERsafw8HD8/f0BU5Ft2bIlhw4donz58hQtWhSAPXv2cOzYMTZt2gTAjRs3OHPmDAcOHKBRo0Y4OztToEABqlSpEq/9X375BR8fH1tbuXLlSjKeGzducOPGDfz8/ABo3rw5AwcOtO2vV68eAM899xxnz56Nd35SMe3bt4/58+cTHh7O1atXKVmyZIIJanKPSw0lsg9JnjzQu7dJZseP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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pred=0\n",
        "Afil=0\n",
        "Pfil=0\n",
        "a=data_test['capacity'].values\n",
        "b=data_test['pre'].values\n",
        "j=0\n",
        "k=0\n",
        "for i in range(len(a)):\n",
        "    actual=a[i]\n",
        "    \n",
        "    if actual<=1.38:\n",
        "        j=i\n",
        "        Afil=j\n",
        "        break\n",
        "for i in range(len(a)):\n",
        "    pred=b[i]\n",
        "    if pred< 1.38:\n",
        "        k=i\n",
        "        Pfil=k\n",
        "        break\n",
        "print(\"The Actual fail at cycle number: \"+ str(Afil+ln))\n",
        "print(\"The prediction fail at cycle number: \"+ str(Pfil+ln))\n",
        "RULerror=Pfil-Afil\n",
        "print(\"The error of RUL= \"+ str(RULerror)+ \" Cycle(s)\")"
      ],
      "metadata": {
        "id": "67DCC3Lfr8Gu",
        "outputId": "ed99891c-d20b-4d2d-c3ff-533a103f4f9d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 322,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The Actual fail at cycle number: 49\n",
            "The prediction fail at cycle number: 49\n",
            "The error of RUL= 0 Cycle(s)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "jBu3l_AcueMD"
      },
      "execution_count": 322,
      "outputs": []
    }
  ]
}